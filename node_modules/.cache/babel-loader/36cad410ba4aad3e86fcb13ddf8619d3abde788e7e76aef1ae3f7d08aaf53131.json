{"ast":null,"code":"import axios from 'axios';\nconst HF_API_URL = 'https://api.aimlapi.com/v1'; // Correct base URL\nconst HF_API_TOKEN = '0f5d83585a2f43ca8590acf3ff3b3802'; // Replace with your API key\n\n// Function to fetch recipe suggestions\nexport const fetchRecipe = async ingredients => {\n  try {\n    var _response$data$choice;\n    const systemPrompt = \"You are a skilled chef. Generate a recipe based on the ingredients provided.\";\n    const userPrompt = `Create a recipe using the following ingredients: ${ingredients}`;\n    const response = await axios.post(`${HF_API_URL}/chat/completions`,\n    // Correct endpoint\n    {\n      model: \"mistralai/Mistral-7B-Instruct-v0.2\",\n      // Model from example, change to your preferred model\n      messages: [{\n        role: \"system\",\n        content: systemPrompt\n      }, {\n        role: \"user\",\n        content: userPrompt\n      }],\n      temperature: 0.7,\n      max_tokens: 256\n    }, {\n      headers: {\n        Authorization: `Bearer ${HF_API_TOKEN}`\n      }\n    });\n    const recipe = ((_response$data$choice = response.data.choices[0]) === null || _response$data$choice === void 0 ? void 0 : _response$data$choice.message.content) || 'No recipe found.';\n    return recipe;\n  } catch (error) {\n    console.error('Error fetching recipe:', error);\n    throw new Error('Failed to fetch recipe. Please try again.');\n  }\n};\nexport default fetchRecipe;","map":{"version":3,"names":["axios","HF_API_URL","HF_API_TOKEN","fetchRecipe","ingredients","_response$data$choice","systemPrompt","userPrompt","response","post","model","messages","role","content","temperature","max_tokens","headers","Authorization","recipe","data","choices","message","error","console","Error"],"sources":["/home/maxwell/Documents/dePartie/src/services/ai.js"],"sourcesContent":["import axios from 'axios';\n\nconst HF_API_URL = 'https://api.aimlapi.com/v1'; // Correct base URL\nconst HF_API_TOKEN = '0f5d83585a2f43ca8590acf3ff3b3802'; // Replace with your API key\n\n// Function to fetch recipe suggestions\nexport const fetchRecipe = async (ingredients) => {\n  try {\n    const systemPrompt = \"You are a skilled chef. Generate a recipe based on the ingredients provided.\";\n    const userPrompt = `Create a recipe using the following ingredients: ${ingredients}`;\n\n    const response = await axios.post(\n      `${HF_API_URL}/chat/completions`, // Correct endpoint\n      {\n        model: \"mistralai/Mistral-7B-Instruct-v0.2\", // Model from example, change to your preferred model\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userPrompt },\n        ],\n        temperature: 0.7,\n        max_tokens: 256,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${HF_API_TOKEN}`,\n        },\n      }\n    );\n\n    const recipe = response.data.choices[0]?.message.content || 'No recipe found.';\n    return recipe;\n  } catch (error) {\n    console.error('Error fetching recipe:', error);\n    throw new Error('Failed to fetch recipe. Please try again.');\n  }\n};\n\nexport default fetchRecipe;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAG,4BAA4B,CAAC,CAAC;AACjD,MAAMC,YAAY,GAAG,kCAAkC,CAAC,CAAC;;AAEzD;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,WAAW,IAAK;EAChD,IAAI;IAAA,IAAAC,qBAAA;IACF,MAAMC,YAAY,GAAG,8EAA8E;IACnG,MAAMC,UAAU,GAAG,oDAAoDH,WAAW,EAAE;IAEpF,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAC/B,GAAGR,UAAU,mBAAmB;IAAE;IAClC;MACES,KAAK,EAAE,oCAAoC;MAAE;MAC7CC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEP;MAAa,CAAC,EACzC;QAAEM,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEN;MAAW,CAAC,CACtC;MACDO,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE;IACd,CAAC,EACD;MACEC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUf,YAAY;MACvC;IACF,CACF,CAAC;IAED,MAAMgB,MAAM,GAAG,EAAAb,qBAAA,GAAAG,QAAQ,CAACW,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,cAAAf,qBAAA,uBAAxBA,qBAAA,CAA0BgB,OAAO,CAACR,OAAO,KAAI,kBAAkB;IAC9E,OAAOK,MAAM;EACf,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIE,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACF,CAAC;AAED,eAAerB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}